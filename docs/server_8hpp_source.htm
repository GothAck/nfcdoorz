<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>NFC Doorz: lib/ipc/server.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">NFC Doorz
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('server_8hpp_source.htm','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">server.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#include &quot;ipc.hpp&quot;</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacenfcdoorz_1_1ipc.htm">nfcdoorz::ipc</a> {</div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;</div><div class="line"><a name="l00005"></a><span class="lineno"><a class="line" href="classnfcdoorz_1_1ipc_1_1_ipc_server_base.htm">    5</a></span>&#160;  <span class="keyword">class </span><a class="code" href="classnfcdoorz_1_1ipc_1_1_ipc_server_base.htm">IpcServerBase</a> : <span class="keyword">public</span> <span class="keyword">virtual</span> <a class="code" href="classnfcdoorz_1_1ipc_1_1_ipc_base.htm">IpcBase</a> {</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;    <span class="keywordtype">void</span> listen();</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> handleCall(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;pid, <span class="keyword">const</span> uvw::DataEvent &amp;ev, uvw::PipeHandle &amp;sock) = 0;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;  };</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;  <span class="keyword">template</span>&lt;<span class="keyword">typename</span> I, <span class="keyword">typename</span> ... Rest&gt;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;  constexpr <span class="keyword">inline</span> <span class="keywordtype">void</span> initialize_map(std::map&lt;std::string, auto&gt; &amp;map) {</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;    map.try_emplace(I::GetFullyQualifiedName());</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;    std::cout &lt;&lt; I::GetFullyQualifiedName() &lt;&lt; std::endl;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    <span class="keywordflow">if</span> constexpr (<span class="keyword">sizeof</span>...(Rest)) {</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;      initialize_map&lt;Rest...&gt;(map);</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    }</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;  }</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;  <span class="keyword">template</span>&lt;<span class="keyword">typename</span> ... APIServers&gt;</div><div class="line"><a name="l00022"></a><span class="lineno"><a class="line" href="classnfcdoorz_1_1ipc_1_1_ipc_server_multi.htm">   22</a></span>&#160;  <span class="keyword">class </span><a class="code" href="classnfcdoorz_1_1ipc_1_1_ipc_server_multi.htm">IpcServerMulti</a> :</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="keyword">public</span> <a class="code" href="classnfcdoorz_1_1ipc_1_1_ipc_server_base.htm">IpcServerBase</a>,</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <span class="keyword">public</span> <span class="keyword">virtual</span> <a class="code" href="classnfcdoorz_1_1ipc_1_1_ipc_base.htm">IpcBase</a>,</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keyword">public</span> std::enable_shared_from_this&lt;IpcServerMulti&lt;APIServers...&gt;&gt;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;  {</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    std::shared_ptr&lt;IpcServerMulti&gt; getptr() {</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;      <span class="keywordflow">return</span> std::enable_shared_from_this&lt;<a class="code" href="classnfcdoorz_1_1ipc_1_1_ipc_server_multi.htm">IpcServerMulti</a>&lt;APIServers...&gt;&gt;::shared_from_this();</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    }</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> APIServer&gt;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keyword">class </span>IpcServiceHandler :</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;      <span class="keyword">public</span> std::enable_shared_from_this&lt;IpcServiceHandler&lt;APIServer&gt;&gt;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    {</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;      <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classnfcdoorz_1_1ipc_1_1_ipc_server_multi.htm">IpcServerMulti</a>;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;      <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classnfcdoorz_1_1ipc_1_1_ipc_server_multi.htm">IpcServerMulti</a>&lt;APIServers...&gt;;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;      std::shared_ptr&lt;IpcServerMulti&gt; _server;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;      IpcServiceHandler(std::shared_ptr&lt;IpcServerMulti&gt; server) : _server(server) {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;      }</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;      std::shared_ptr&lt;IpcServiceHandler&gt; getptr() {</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <span class="keywordflow">return</span> std::enable_shared_from_this&lt;IpcServiceHandler&lt;APIServer&gt;&gt;::shared_from_this();</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;      }</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;      <span class="keyword">using</span> shared_ptr_self = std::shared_ptr&lt;IpcServiceHandler&lt;APIServer&gt;&gt;;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;      <span class="keyword">using</span> APICall = std::remove_pointer_t&lt;decltype(std::declval&lt;APIServer&gt;().call())&gt;;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;      <span class="keyword">using</span> APICallT = <span class="keyword">typename</span> APICall::NativeTableType;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;      <span class="keyword">using</span> APICallTPtr = std::unique_ptr&lt;APICallT&gt;;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;      <span class="keyword">using</span> APICallsEnum = std::remove_pointer_t&lt;decltype(std::declval&lt;APICall&gt;().msg_type())&gt;;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;      <span class="keyword">using</span> APIReply = std::remove_pointer_t&lt;decltype(std::declval&lt;APIServer&gt;().reply())&gt;;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;      <span class="keyword">using</span> APIRepliesEnum = std::remove_pointer_t&lt;decltype(std::declval&lt;APIReply&gt;().msg_type())&gt;;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;      <span class="keyword">using</span> APIEventsEnum = std::remove_pointer_t&lt;decltype(std::declval&lt;APIReply&gt;().event_type())&gt;;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;      <span class="keyword">using</span> APIReplyT = <span class="keyword">typename</span> APIReply::NativeTableType;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;      <span class="keyword">using</span> APIReplyTPtr = std::unique_ptr&lt;APIReplyT&gt;;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;      <span class="keyword">using</span> APIEventsUnion = decltype(APIReplyT::event);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;      <span class="keyword">using</span> MessageHandlerFuture_t = std::function&lt;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        std::future&lt;APIReplyTPtr&gt;(shared_ptr_self, <span class="keyword">const</span> APICallT &amp;, APIReplyTPtr, uvw::PipeHandle &amp;)</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        &gt;;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;      <span class="keyword">using</span> MessageHandler_t = std::function&lt;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        APIReplyTPtr(shared_ptr_self, <span class="keyword">const</span> APICallT &amp;, APIReplyTPtr, uvw::PipeHandle &amp;)</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        &gt;;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;      shared_ptr_self registerHandler(APICallsEnum type, MessageHandlerFuture_t handler) {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        handlers[type] = handler;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordflow">return</span> getptr();</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;      }</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;      shared_ptr_self registerHandler(APICallsEnum type, MessageHandler_t handler) {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        handlers[type] = [handler](shared_ptr_self <span class="keyword">self</span>, APICallT t, APIReplyTPtr r, uvw::PipeHandle &amp;p) {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                           std::promise&lt;APIReplyTPtr&gt; prom;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                           prom.set_value(std::move(handler(<span class="keyword">self</span>, t, std::move(r), p)));</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                           <span class="keywordflow">return</span> prom.get_future();</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                         };</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordflow">return</span> getptr();</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;      }</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;      <span class="keywordtype">void</span> sendEvent(APIEventsUnion &amp;event, uvw::PipeHandle &amp;pipe) {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        APIReplyTPtr reply = std::make_unique&lt;APIReplyT&gt;();</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        reply-&gt;event = event;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        flatbuffers::FlatBufferBuilder builder(1024);</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        builder.Finish(APIReply::Pack(builder, reply.get()));</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="keywordtype">size_t</span> size = builder.GetSize();</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        std::unique_ptr&lt;char[]&gt; data = std::make_unique&lt;char[]&gt;(size);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        memcpy(data.get(), builder.GetBufferPointer(), size);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        pipe.write(move(data), size);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;      }</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00091"></a><span class="lineno"><a class="line" href="structnfcdoorz_1_1ipc_1_1_ipc_server_multi_1_1_ipc_service_handler_1_1_call_reply_callback.htm">   91</a></span>&#160;      <span class="keyword">struct </span><a class="code" href="structnfcdoorz_1_1ipc_1_1_ipc_server_multi_1_1_ipc_service_handler_1_1_call_reply_callback.htm">CallReplyCallback</a> : <span class="keyword">public</span> <a class="code" href="structnfcdoorz_1_1ipc_1_1_ipc_base_1_1_executable.htm">IpcServerMulti::Executable</a> {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <a class="code" href="structnfcdoorz_1_1ipc_1_1_ipc_server_multi_1_1_ipc_service_handler_1_1_call_reply_callback.htm">CallReplyCallback</a>(</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;          uint64_t _call_id,</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;          std::shared_ptr&lt;std::future&lt;APIReplyTPtr&gt;&gt; _future,</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;          uvw::PipeHandle &amp;_pipe,</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;          shared_ptr_self _handler</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;          ) :</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;          call_id(_call_id),</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;          future(_future),</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;          pipe(_pipe),</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;          handler(_handler)</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;          setTimeout(1000);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        }</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        uint64_t call_id;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        std::shared_ptr&lt;std::future&lt;APIReplyTPtr&gt;&gt; future;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        uvw::PipeHandle &amp;pipe;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        shared_ptr_self handler;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="structnfcdoorz_1_1ipc_1_1_ipc_server_multi_1_1_ipc_service_handler_1_1_call_reply_callback.htm#ab07db981f8c480c7afbc31f9da6aa0cc">  111</a></span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="structnfcdoorz_1_1ipc_1_1_ipc_server_multi_1_1_ipc_service_handler_1_1_call_reply_callback.htm#ab07db981f8c480c7afbc31f9da6aa0cc">run</a>()<span class="keyword"> override </span>{</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;          <span class="keywordflow">if</span> (future-&gt;wait_for(std::chrono::seconds(0)) != std::future_status::timeout) {</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            APIReplyTPtr reply = future-&gt;get();</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            reply-&gt;id = call_id;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            flatbuffers::FlatBufferBuilder builder(1024);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            builder.Finish(APIReply::Pack(builder, reply.get()));</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="keywordtype">size_t</span> size = builder.GetSize();</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            std::unique_ptr&lt;char[]&gt; data = std::make_unique&lt;char[]&gt;(size);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            memcpy(data.get(), builder.GetBufferPointer(), size);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            pipe.write(move(data), size);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;          }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;          <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;      };</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;      <span class="keywordtype">void</span> handleCall(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;pid, <span class="keyword">const</span> uvw::DataEvent &amp;ev, uvw::PipeHandle &amp;pipe) {</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        LOG_DEBUG &lt;&lt; <span class="stringliteral">&quot;IpcServiceHandler::handleCall&quot;</span>;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        uint8_t *data = (uint8_t *) ev.data.get();</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        flatbuffers::BufferRef&lt;APICall&gt; buf(data, ev.length);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="keywordflow">if</span> (!buf.Verify()) {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;          std::cout &lt;&lt; <span class="stringliteral">&quot;verify failed&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;          <span class="keywordflow">return</span>;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        }</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keyword">typename</span> APICall::NativeTableType call;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        buf.GetRoot()-&gt;UnPackTo(&amp;call);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        uint64_t call_id = call.id;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="keyword">auto</span> msg_type = call.msg.type;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keywordflow">if</span> (handlers.count(msg_type)) {</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;          <span class="keyword">auto</span> reply = std::make_unique&lt;APIReplyT&gt;();</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;          <span class="keyword">auto</span> future = std::make_shared&lt;std::future&lt;APIReplyTPtr&gt;&gt;(</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            handlers[msg_type] (</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;              getptr(),</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;              call,</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;              std::move(reply),</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;              pipe</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;              )</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            );</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;          _server-&gt;registerIdleCall(std::make_shared&lt;CallReplyCallback&gt;(</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            call_id, future, pipe, getptr()</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            ));</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        }</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;      }</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;      std::map&lt;APICallsEnum, MessageHandlerFuture_t&gt; handlers;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    };</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keyword">using</span> VariantT = std::variant&lt;std::monostate, std::shared_ptr&lt;IpcServiceHandler&lt;APIServers&gt;&gt;...&gt;;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <a class="code" href="classnfcdoorz_1_1ipc_1_1_ipc_server_multi.htm">IpcServerMulti</a>() {</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;      initialize_map&lt;APIServers...&gt;(handlers);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    }</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> APIServer, <span class="keyword">typename</span> ... Args&gt;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    std::shared_ptr&lt;IpcServiceHandler&lt;APIServer&gt;&gt; registerServiceHandler(Args... args) {</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;      std::shared_ptr&lt;IpcServiceHandler&lt;APIServer&gt;&gt; handler(</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keyword">new</span> IpcServiceHandler&lt;APIServer&gt;(getptr(), args ...)</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        );</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;      handlers[APIServer::GetFullyQualifiedName()] = handler;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;      <span class="keywordflow">return</span> handler;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    }</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordtype">void</span> registerPid(<span class="keyword">const</span> std::string &amp;name, <span class="keyword">const</span> <span class="keywordtype">int</span> &amp;pid) {</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;      pid_map[pid] = name;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    }</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keywordtype">void</span> unregisterPid(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;pid) {</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;      pid_map.erase(pid);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    }</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> handleCall(<span class="keyword">const</span> <span class="keywordtype">int</span> &amp;pid, <span class="keyword">const</span> uvw::DataEvent &amp;ev, uvw::PipeHandle &amp;sock)<span class="keyword"> override </span>{</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;      <span class="keywordflow">if</span> (!pid_map.count(pid)) {</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        LOG_ERROR &lt;&lt; <span class="stringliteral">&quot;Pid &quot;</span> &lt;&lt; pid &lt;&lt; <span class="stringliteral">&quot; not registered&quot;</span>;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;      }</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;      <span class="keyword">auto</span> pid_handler = pid_map.at(pid);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;      <span class="keywordflow">if</span> (!handlers.count(pid_handler)) {</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        LOG_ERROR &lt;&lt; <span class="stringliteral">&quot;Pid &quot;</span> &lt;&lt; pid &lt;&lt; <span class="stringliteral">&quot; has invalid handler &quot;</span> &lt;&lt; pid_handler;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;      }</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;      std::visit(</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <a class="code" href="structoverloaded.htm">overloaded</a> {</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        [](std::monostate &amp;handler) {</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;          <span class="comment">// Ignore monostate</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;          LOG_ERROR &lt;&lt; <span class="stringliteral">&quot;handleCall hit a std::monostate&quot;</span>;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        },</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        [&amp;pid, &amp;ev, &amp;sock](<span class="keyword">auto</span> &amp;handler) {</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;          handler-&gt;handleCall(pid, ev, sock);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        }</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;      },</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        handlers.at(pid_map.at(pid))</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        );</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    }</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    std::map&lt;std::string, VariantT&gt; handlers;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    std::map&lt;int, std::string&gt; pid_map;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;  };</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  <span class="keyword">extern</span> std::shared_ptr&lt;IpcServerMulti&lt;api::Server, auth::Server, policy::Server&gt;&gt; server;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;}</div><div class="ttc" id="classnfcdoorz_1_1ipc_1_1_ipc_base_htm"><div class="ttname"><a href="classnfcdoorz_1_1ipc_1_1_ipc_base.htm">nfcdoorz::ipc::IpcBase</a></div><div class="ttdoc">Base of all IPC classes. Contains the common required components for running IPC communications. </div><div class="ttdef"><b>Definition:</b> <a href="ipc_8hpp_source.htm#l00042">ipc.hpp:42</a></div></div>
<div class="ttc" id="classnfcdoorz_1_1ipc_1_1_ipc_server_base_htm"><div class="ttname"><a href="classnfcdoorz_1_1ipc_1_1_ipc_server_base.htm">nfcdoorz::ipc::IpcServerBase</a></div><div class="ttdef"><b>Definition:</b> <a href="server_8hpp_source.htm#l00005">server.hpp:5</a></div></div>
<div class="ttc" id="namespacenfcdoorz_1_1ipc_htm"><div class="ttname"><a href="namespacenfcdoorz_1_1ipc.htm">nfcdoorz::ipc</a></div><div class="ttdef"><b>Definition:</b> <a href="api_8hpp_source.htm#l00005">api.hpp:5</a></div></div>
<div class="ttc" id="structnfcdoorz_1_1ipc_1_1_ipc_server_multi_1_1_ipc_service_handler_1_1_call_reply_callback_htm"><div class="ttname"><a href="structnfcdoorz_1_1ipc_1_1_ipc_server_multi_1_1_ipc_service_handler_1_1_call_reply_callback.htm">nfcdoorz::ipc::IpcServerMulti::IpcServiceHandler::CallReplyCallback</a></div><div class="ttdef"><b>Definition:</b> <a href="server_8hpp_source.htm#l00091">server.hpp:91</a></div></div>
<div class="ttc" id="structnfcdoorz_1_1ipc_1_1_ipc_base_1_1_executable_htm"><div class="ttname"><a href="structnfcdoorz_1_1ipc_1_1_ipc_base_1_1_executable.htm">nfcdoorz::ipc::IpcBase::Executable</a></div><div class="ttdoc">Base for executables run in event loop idle. Used for cross thread execution in IPCClient. call registerIdleCall with an object subclassed from this. This executable will be rescheduled every event loop iteration until run() returns true. </div><div class="ttdef"><b>Definition:</b> <a href="ipc_8hpp_source.htm#l00066">ipc.hpp:66</a></div></div>
<div class="ttc" id="classnfcdoorz_1_1ipc_1_1_ipc_server_multi_htm"><div class="ttname"><a href="classnfcdoorz_1_1ipc_1_1_ipc_server_multi.htm">nfcdoorz::ipc::IpcServerMulti</a></div><div class="ttdef"><b>Definition:</b> <a href="server_8hpp_source.htm#l00022">server.hpp:22</a></div></div>
<div class="ttc" id="structnfcdoorz_1_1ipc_1_1_ipc_server_multi_1_1_ipc_service_handler_1_1_call_reply_callback_htm_ab07db981f8c480c7afbc31f9da6aa0cc"><div class="ttname"><a href="structnfcdoorz_1_1ipc_1_1_ipc_server_multi_1_1_ipc_service_handler_1_1_call_reply_callback.htm#ab07db981f8c480c7afbc31f9da6aa0cc">nfcdoorz::ipc::IpcServerMulti::IpcServiceHandler::CallReplyCallback::run</a></div><div class="ttdeci">virtual bool run() override</div><div class="ttdoc">Override this method. </div><div class="ttdef"><b>Definition:</b> <a href="server_8hpp_source.htm#l00111">server.hpp:111</a></div></div>
<div class="ttc" id="structoverloaded_htm"><div class="ttname"><a href="structoverloaded.htm">overloaded</a></div><div class="ttdef"><b>Definition:</b> <a href="types_8hpp_source.htm#l00097">types.hpp:97</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_97aefd0d527b934f1d99a682da8fe6a9.htm">lib</a></li><li class="navelem"><a class="el" href="dir_eea5a30af1860202cf994ad4b8d0af6a.htm">ipc</a></li><li class="navelem"><b>server.hpp</b></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
