<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>NFC Doorz: lib/adapter.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">NFC Doorz
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('adapter_8cpp_source.htm','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">adapter.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#include &lt;iomanip&gt;</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &quot;config.hpp&quot;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &quot;adapter.hpp&quot;</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &quot;types.hpp&quot;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacenfcdoorz.htm">nfcdoorz</a> {</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;  <span class="keyword">using namespace </span><a class="code" href="namespacestd.htm">std</a>;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;  <span class="keywordtype">void</span> printKey(MifareDESFireKey desfire_key) {</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;    IF_LOG(plog::debug) {</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;      stringbuf sbuf;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;      ostream os(&amp;sbuf);</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;      uint8_t *key = (uint8_t *) desfire_key;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;      os &lt;&lt; <span class="stringliteral">&quot;printKey: &quot;</span>;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;      <span class="keywordflow">for</span> (uint8_t i = 0; i &lt; 24; i++) {</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;        <span class="keywordflow">if</span> (i) {</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;          os &lt;&lt; <span class="stringliteral">&quot;:&quot;</span>;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;        }</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;        os &lt;&lt; hex &lt;&lt; (int) *(key + i);</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;      }</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;      LOG_DEBUG &lt;&lt; sbuf.str();</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    }</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;  }</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;  <span class="keywordtype">bool</span> Adapter::connect() {</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="keywordflow">return</span> tagInterface.connect();</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;  }</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;  <span class="keywordtype">bool</span> Adapter::disconnect() {</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="keywordflow">return</span> tagInterface.disconnect();</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;  }</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;  <span class="keywordtype">bool</span> Adapter::authenticatePICC(nfc::Key &amp;key) {</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    AppID_t aid = { 0, 0, 0 };</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordflow">return</span> authenticateAppByID(aid, key);</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  }</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;  <span class="keywordtype">bool</span> Adapter::authenticatePICC() {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    AppID_t aid = { 0, 0, 0 };</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">return</span> visit(<a class="code" href="structoverloaded.htm">overloaded</a> {</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;      [<span class="keyword">this</span>, &amp;aid](monostate _arg) -&gt; <span class="keywordtype">bool</span> {</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <span class="keywordflow">return</span> visit([<span class="keyword">this</span>, &amp;aid](<span class="keyword">auto</span> &amp;key) {</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;          LOG_VERBOSE &lt;&lt; <span class="stringliteral">&quot;authenticatePICC config.picc.key&quot;</span>;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;          <span class="keywordflow">return</span> authenticateAppByID(</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;            aid,</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            key</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            );</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        }, config.picc.key);</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;      },</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;      [<span class="keyword">this</span>, &amp;aid](<span class="keyword">auto</span> key) -&gt; <span class="keywordtype">bool</span> {</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        LOG_VERBOSE &lt;&lt; <span class="stringliteral">&quot;authenticatePICC _overriddenMasterKey&quot;</span>;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordflow">return</span> authenticateAppByID(</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;          aid,</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;          key</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;          );</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;      }</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    }, _overriddenMasterKey);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  }</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  <span class="keywordtype">bool</span> Adapter::authenticateAppByID(AppID_t &amp;aid, nfc::Key &amp;key) {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    LOG_VERBOSE &lt;&lt; <span class="stringliteral">&quot;authenticateAppByID: &quot;</span> &lt;&lt; hex &lt;&lt; (int) aid[0] &lt;&lt; <span class="stringliteral">&quot;:&quot;</span> &lt;&lt; (<span class="keywordtype">int</span>) aid[1] &lt;&lt; <span class="stringliteral">&quot;:&quot;</span> &lt;&lt; (int) aid[2];</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    MifareDESFireAID api_aid = mifare_desfire_aid_new(aid[0] | (aid[1] &lt;&lt; 8) | (aid[2] &lt;&lt; 16));</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordflow">if</span> (!tagInterface.select_application(api_aid)) {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    }</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    _aid = aid;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    LOG_VERBOSE &lt;&lt; <span class="stringliteral">&quot;authenticateAppByID diversify: &quot;</span> &lt;&lt; key.diversify;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    CLEAN_KEY MifareDESFireKey api_key = key.diversify</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                                         ? key.deriveKey(_uid, aid)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                                         : key;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    printKey(api_key);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordflow">return</span> tagInterface.authenticate(0, api_key);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  }</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  <span class="keywordtype">bool</span> Adapter::authenticateApp(<span class="keywordtype">string</span> app_name, <span class="keywordtype">string</span> key_name) {</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;app: config.apps) {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;      <span class="keywordflow">if</span> (app.name == app_name) {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> &amp;key: app.keys) {</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;          <span class="keywordflow">if</span> (visit([<span class="keyword">this</span>, &amp;key_name, &amp;app](<span class="keyword">auto</span> &amp;key) {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            <span class="keywordflow">if</span> (key.name == key_name) {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;              if (authenticateAppByID(app.aid, key)) {</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                _app = &amp;app;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;              } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                _app = nullptr;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;              }</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;              <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            }</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;          }, key)) {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            <span class="keywordflow">return</span> _app != <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;          }</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        }</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;      }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    }</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;  }</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  <span class="keywordtype">bool</span> Adapter::changeKey(uint8_t key_id, nfc::Key &amp;new_key, nfc::Key &amp;old_key) {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    CLEAN_KEY MifareDESFireKey api_new_key = new_key.diversify</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                                             ? new_key.deriveKey(_uid, _aid)</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                                             : new_key;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    CLEAN_KEY MifareDESFireKey api_old_key = old_key.diversify</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                                             ? old_key.deriveKey(_uid, _aid)</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                                             : old_key;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    printKey(api_new_key);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordflow">return</span> tagInterface.change_key(key_id, api_new_key, api_old_key);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  }</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  <span class="keywordtype">bool</span> Adapter::deleteApplication(AppID_t aid) {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    CLEAN_AID MifareDESFireAID api_aid = mifare_desfire_aid_new(aid[0] | (aid[1] &lt;&lt; 8) | (aid[2] &lt;&lt; 16));</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">return</span> tagInterface.delete_application(api_aid);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;  }</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  <span class="keywordtype">bool</span> Adapter::createApplication(AppID_t aid, uint8_t settings, uint8_t numKeys) {</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    CLEAN_AID MifareDESFireAID api_aid = mifare_desfire_aid_new(aid[0] | (aid[1] &lt;&lt; 8) | (aid[2] &lt;&lt; 16));</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    _aid = aid;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordflow">return</span> tagInterface.create_application_aes(api_aid, settings, numKeys);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  }</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;  <span class="keywordtype">bool</span> Adapter::createFile(config::FileType_t &amp;file_config) {</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    LOG_VERBOSE &lt;&lt; <span class="stringliteral">&quot;Adapter::createFile&quot;</span>;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordflow">return</span> visit([<span class="keyword">this</span>](<span class="keyword">auto</span> &amp;file) {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;      <span class="keywordflow">return</span> file.create(tagInterface);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    }, file_config);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  }</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  <span class="keywordtype">bool</span> Adapter::setUID(UID_t uid) {</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    _uid = uid;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;  <span class="keywordtype">bool</span> Adapter::setUID(<span class="keywordtype">string</span> uid_str) {</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordtype">size_t</span> len = uid_str.length();</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">if</span> (len % 2) {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    }</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordflow">if</span> (len != _uid.size() * 2) {</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    }</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordflow">for</span> (uint8_t i = 0; i &lt; len; i += 2) {</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;      _uid[i / 2] = (char2int(uid_str[i]) &lt;&lt; 4) | char2int(uid_str[i + 1]);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    }</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;  }</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  <span class="keywordtype">bool</span> Adapter::getUIDFromCard() {</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordtype">char</span> *uid = tagInterface.get_uid();</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    LOG_VERBOSE &lt;&lt; <span class="stringliteral">&quot;Adapter::getUIDFromCard: &quot;</span> &lt;&lt; uid;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">return</span> setUID(uid);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;  }</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;  UID_t Adapter::getUID() {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    LOG_VERBOSE &lt;&lt; <span class="stringliteral">&quot;Adapter::getUID&quot;</span>;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keywordflow">if</span> (all_of(_uid.begin(), _uid.end(), [](uint8_t c) {</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;      <span class="keywordflow">return</span> c == 0;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    })) {</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;      getUIDFromCard();</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    }</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordflow">return</span> _uid;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;  }</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  <span class="keywordtype">string</span> Adapter::getUIDString() {</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keyword">auto</span> uid = getUID();</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    stringstream sb(<span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keywordtype">bool</span> rest = <span class="keyword">false</span>;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> c: uid) {</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;      <span class="keywordflow">if</span> (rest) {</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        sb &lt;&lt; <span class="stringliteral">&quot;:&quot;</span>;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;      }</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;      sb</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        &lt;&lt; setfill(<span class="charliteral">&#39;0&#39;</span>)</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        &lt;&lt; setw(2)</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        &lt;&lt; hex</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        &lt;&lt; (int) c;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;      rest = <span class="keyword">true</span>;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    }</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordflow">return</span> sb.str();</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  }</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;  <span class="keywordtype">bool</span> Adapter::setOverriddenMasterKey(nfc::KeyVariant_t key) {</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    visit([<span class="keyword">this</span>](<span class="keyword">auto</span> key) {</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;      _overriddenMasterKey = key;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    }, key);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;  }</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;  <span class="keywordtype">bool</span> Adapter::setOverriddenMasterKey(<span class="keywordtype">string</span> key) {</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    _overriddenMasterKey = nfc::KeyAES(key, <span class="keyword">true</span>);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;  }</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;}</div><div class="ttc" id="namespacestd_htm"><div class="ttname"><a href="namespacestd.htm">std</a></div><div class="ttdoc">STL namespace. </div></div>
<div class="ttc" id="structoverloaded_htm"><div class="ttname"><a href="structoverloaded.htm">overloaded</a></div><div class="ttdef"><b>Definition:</b> <a href="types_8hpp_source.htm#l00097">types.hpp:97</a></div></div>
<div class="ttc" id="namespacenfcdoorz_htm"><div class="ttname"><a href="namespacenfcdoorz.htm">nfcdoorz</a></div><div class="ttdef"><b>Definition:</b> <a href="adapter_8cpp_source.htm#l00007">adapter.cpp:7</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_97aefd0d527b934f1d99a682da8fe6a9.htm">lib</a></li><li class="navelem"><b>adapter.cpp</b></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
