<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>NFC Doorz: lib/nfc.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">NFC Doorz
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('nfc_8cpp_source.htm','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">nfc.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &quot;nfc.hpp&quot;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacenfcdoorz_1_1nfc.htm">nfcdoorz::nfc</a> {</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;  <span class="keyword">using namespace </span><a class="code" href="namespacestd.htm">std</a>;</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;  Context::~Context() {</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;    <span class="keywordflow">if</span> (_context) {</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;      nfc_exit(_context);</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;    }</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;  }</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;  <span class="keywordtype">bool</span> Context::init() {</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;    <span class="keywordflow">if</span> (_context != <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    }</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    nfc_init(&amp;_context);</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    <span class="keywordflow">return</span> _context != <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;  }</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;  vector&lt;Device&gt; Context::getDevices() {</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    vector&lt;Device&gt; ret;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <span class="keywordflow">if</span> (_context == <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;      <span class="keywordflow">return</span> ret;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    }</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    nfc_connstring devices[32];</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keywordtype">int</span> device_count;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    device_count = nfc_list_devices(_context, devices, 32);</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keywordflow">for</span> (uint8_t i = 0; i &lt; device_count; i++) {</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;      ret.emplace_back(*<span class="keyword">this</span>, devices[i]);</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    }</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keywordflow">return</span> ret;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;  }</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;  optional&lt;Device&gt; Context::getDeviceMatching(<span class="keywordtype">string</span> suffix) {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    optional&lt;Device&gt; ret;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordflow">if</span> (_context == <span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;      <span class="keywordflow">return</span> ret;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    }</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    nfc_connstring devices[32];</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordtype">int</span> device_count;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    device_count = nfc_list_devices(_context, devices, 32);</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">for</span> (uint8_t i = 0; i &lt; device_count; i++) {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;      <span class="keywordtype">string</span> device_string = devices[i];</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;      <span class="keywordflow">if</span> (</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        device_string.size() &gt;= suffix.size() &amp;&amp;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        device_string.compare(</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;          device_string.size() - suffix.size(),</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;          suffix.size(),</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;          suffix</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;          ) == 0</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        ) {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        ret.emplace(*<span class="keyword">this</span>, device_string);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keywordflow">break</span>;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;      }</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    }</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">return</span> ret;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;  }</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;  Device Context::getDeviceString(<span class="keywordtype">string</span> device_string) {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordflow">return</span> Device(*<span class="keyword">this</span>, device_string);</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  }</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  Device::~Device() {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keywordflow">if</span> (_tags) {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;      freefare_free_tags(_tags);</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    }</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordflow">if</span> (_device) {</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;      nfc_close(_device);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    }</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;  }</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  <span class="keywordtype">bool</span> Device::open() {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordflow">if</span> (_device) {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    }</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    _device = nfc_open(_context, _device_string.c_str());</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">return</span> _device != <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  }</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  vector&lt;Tag&gt; Device::getTags() {</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    vector&lt;Tag&gt; ret;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordflow">if</span> (!_device) {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;      <span class="keywordflow">return</span> ret;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    }</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordflow">if</span> (_tags) {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;      free(_tags);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    }</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    _tags = freefare_get_tags(_device);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordflow">if</span> (!_tags) {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;      <span class="keywordflow">return</span> ret;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    }</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; _tags[i] &amp;&amp; i &lt; 32; i++) {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;      ret.emplace_back(*<span class="keyword">this</span>, _tags[i]);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordflow">return</span> ret;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;  }</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  <span class="keywordtype">bool</span> Device::initiatorInit() {</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">return</span> nfc_initiator_init(_device) &gt; -1;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  }</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  <span class="keywordtype">bool</span> Device::initiatorPollTarget(<span class="keyword">function</span>&lt;<span class="keywordtype">bool</span> (Tag &amp;tag)&gt; handleTag) {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keyword">const</span> uint8_t uiPollNr = 255;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keyword">const</span> uint8_t uiPeriod = 1;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keyword">const</span> nfc_modulation nmModulations[] = {</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;      { .nmt = NMT_ISO14443A, .nbr = NBR_106 },</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;      { .nmt = NMT_ISO14443B, .nbr = NBR_106 },</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    };</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">size_t</span> szModulations = <span class="keyword">sizeof</span>(nmModulations) / <span class="keyword">sizeof</span>(nfc_modulation);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    nfc_target nt;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordtype">int</span> res = 0;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordflow">while</span> (<span class="keyword">true</span>) {</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;      res = nfc_initiator_poll_target(_device, nmModulations, szModulations, uiPollNr, uiPeriod, &amp;nt);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;      <span class="keywordflow">if</span> (res &lt; 0) {</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;      }</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;      <span class="keywordflow">if</span> (res) {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        Tag tag = Tag(*<span class="keyword">this</span>, freefare_tag_new(_device, nt));</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keywordtype">bool</span> shouldContinue = handleTag(tag);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="comment">// Wait for tag removal</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="keywordflow">while</span> (0 == nfc_initiator_target_is_present(_device, NULL)) {}</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        freefare_free_tag(tag);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="keywordflow">if</span> (!shouldContinue) {</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;          <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;      }</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    }</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  }</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;  <span class="keyword">enum</span> freefare_tag_type Tag::getTagType() {</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keywordflow">return</span> freefare_get_tag_type(_tag);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  }</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  TagInterfaceVariant_t Tag::getTagInterfaceByType() {</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordflow">return</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;      <a class="code" href="struct_get_variant.htm">GetVariant</a>&lt;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;      TagInterfaceVariant_t</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;      &gt;::makeArgs(getTagType(), make_tuple(*<span class="keyword">this</span>));</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;  }</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  Tag::operator FreefareTag() {</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordflow">return</span> _tag;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;  }</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;  Key::operator MifareDESFireKey() {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;  }</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;  MifareDESFireKey Key::deriveKeyImpl(</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    MifareKeyType key_type,</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keyword">const</span> UID_t &amp;uid,</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keyword">const</span> AppID_t &amp;aid</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    ) {</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    MifareDESFireKey derived = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    CLEAN_KEY MifareDESFireKey master_key = *<span class="keyword">this</span>;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    IF_LOG(plog::debug) {</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;      stringbuf sbuf;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;      ostream os(&amp;sbuf);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;      os &lt;&lt; <span class="stringliteral">&quot;master_key: &quot;</span>;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;      <span class="keywordflow">for</span> (uint8_t i = 0; i &lt; 24; i++) {</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        os &lt;&lt; hex &lt;&lt; (int) *(((uint8_t *) master_key) + i);</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;      }</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;      LOG_DEBUG &lt;&lt; sbuf.str();</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    }</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    CLEAN_DERIVER MifareKeyDeriver deriver =</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;      mifare_key_deriver_new_an10922(master_key, key_type);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keywordflow">if</span> (!deriver) {</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    }</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keywordflow">if</span> (mifare_key_deriver_begin(deriver) &lt; 0) {</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    }</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    IF_LOG(plog::debug) {</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;      stringbuf sbuf;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;      ostream os(&amp;sbuf);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;      os &lt;&lt; <span class="stringliteral">&quot;uid: &quot;</span>;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;      <span class="keywordflow">for</span> (uint8_t i = 0; i &lt; uid.size(); i++) {</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        os &lt;&lt; hex &lt;&lt; (int) *(((uint8_t *) uid.data()) + i);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;      }</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;      LOG_DEBUG &lt;&lt; sbuf.str();</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    }</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keywordflow">if</span> (mifare_key_deriver_update_data(deriver, uid.data(), uid.size()) &lt; 0) {</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    }</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keywordflow">if</span> (aid[0] || aid[1] || aid[2]) {</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;      LOG_DEBUG &lt;&lt; <span class="stringliteral">&quot;AppID&quot;</span>;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;      <span class="keywordflow">if</span> (mifare_key_deriver_update_data(deriver, aid.data(), aid.size()) &lt; 0) {</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;      }</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    }</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    MifareDESFireKey derived_key = mifare_key_deriver_end(deriver);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    IF_LOG(plog::debug) {</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;      stringbuf sbuf;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;      ostream os(&amp;sbuf);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;      os &lt;&lt; <span class="stringliteral">&quot;derived_key: &quot;</span>;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;      <span class="keywordflow">for</span> (uint8_t i = 0; i &lt; 24; i++) {</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        os &lt;&lt; hex &lt;&lt; (int) *(((uint8_t *) derived_key) + i);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;      }</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;      LOG_DEBUG &lt;&lt; sbuf.str();</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    }</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keywordflow">return</span> derived_key;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;  }</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  MifareDESFireKey Key::deriveKey(<span class="keyword">const</span> UID_t &amp;uid, <span class="keyword">const</span> AppID_t &amp;aid) {</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    LOG_VERBOSE &lt;&lt; <span class="stringliteral">&quot;Key::deriveKey&quot;</span>;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;  }</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;  KeyDES::operator MifareDESFireKey() {</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keywordflow">return</span> mifare_desfire_des_key_new(data.data());</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;  }</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;  MifareDESFireKey KeyDES::deriveKey(<span class="keyword">const</span> UID_t &amp;uid, <span class="keyword">const</span> AppID_t &amp;aid) {</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    LOG_VERBOSE &lt;&lt; <span class="stringliteral">&quot;KeyDES::deriveKey&quot;</span>;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keywordflow">if</span> (!diversify) {</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    }</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keywordflow">return</span> Key::deriveKeyImpl(key_type, uid, aid);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;  }</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;  Key3DES::operator MifareDESFireKey() {</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keywordflow">return</span> mifare_desfire_3des_key_new(data.data());</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;  }</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;  MifareDESFireKey Key3DES::deriveKey(<span class="keyword">const</span> UID_t &amp;uid, <span class="keyword">const</span> AppID_t &amp;aid) {</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    LOG_VERBOSE &lt;&lt; <span class="stringliteral">&quot;Key3DES::deriveKey&quot;</span>;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keywordflow">if</span> (!diversify) {</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    }</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keywordflow">return</span> Key::deriveKeyImpl(key_type, uid, aid);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;  }</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;  Key3k3DES::operator MifareDESFireKey() {</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keywordflow">return</span> mifare_desfire_3k3des_key_new(data.data());</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;  }</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;  MifareDESFireKey Key3k3DES::deriveKey(<span class="keyword">const</span> UID_t &amp;uid, <span class="keyword">const</span> AppID_t &amp;aid) {</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    LOG_VERBOSE &lt;&lt; <span class="stringliteral">&quot;Key3k3DES::deriveKey&quot;</span>;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordflow">if</span> (!diversify) {</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    }</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keywordflow">return</span> Key::deriveKeyImpl(key_type, uid, aid);</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;  }</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;  KeyAES::operator MifareDESFireKey() {</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keywordflow">return</span> mifare_desfire_aes_key_new(data.data());</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;  }</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;  MifareDESFireKey KeyAES::deriveKey(<span class="keyword">const</span> UID_t &amp;uid, <span class="keyword">const</span> AppID_t &amp;aid) {</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    LOG_VERBOSE &lt;&lt; <span class="stringliteral">&quot;KeyAES::deriveKey&quot;</span>;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keywordflow">if</span> (!diversify) {</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    }</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keywordflow">return</span> Key::deriveKeyImpl(key_type, uid, aid);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;  }</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;}</div><div class="ttc" id="namespacestd_htm"><div class="ttname"><a href="namespacestd.htm">std</a></div><div class="ttdoc">STL namespace. </div></div>
<div class="ttc" id="namespacenfcdoorz_1_1nfc_htm"><div class="ttname"><a href="namespacenfcdoorz_1_1nfc.htm">nfcdoorz::nfc</a></div><div class="ttdef"><b>Definition:</b> <a href="nfc_8cpp_source.htm#l00005">nfc.cpp:5</a></div></div>
<div class="ttc" id="struct_get_variant_htm"><div class="ttname"><a href="struct_get_variant.htm">GetVariant</a></div><div class="ttdef"><b>Definition:</b> <a href="types_8hpp_source.htm#l00040">types.hpp:40</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_97aefd0d527b934f1d99a682da8fe6a9.htm">lib</a></li><li class="navelem"><b>nfc.cpp</b></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
