<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>NFC Doorz: lib/ipc/client.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">NFC Doorz
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('ipc_2client_8hpp_source.htm','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">client.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#include &lt;mutex&gt;</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#include &lt;utility&gt;</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &lt;functional&gt;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &lt;future&gt;</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;queue&gt;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;type_traits&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;typeinfo&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;unistd.h&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;fcntl.h&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;sys/signal.h&gt;</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;uvw.hpp&gt;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;flatbuffers/flatbuffers.h&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;flatbuffers/minireflect.h&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &quot;lib/logging.hpp&quot;</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &quot;lib/types.hpp&quot;</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#include &quot;ipc.hpp&quot;</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#define MANAGER_CLIENT_ARGS &quot;--ipc-connect=BASE64_ADDRESS            Manager IPC Address&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacenfcdoorz_1_1ipc.htm">nfcdoorz::ipc</a> {</div><div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="classnfcdoorz_1_1ipc_1_1_ipc_client_base.htm">   27</a></span>&#160;  <span class="keyword">class </span><a class="code" href="classnfcdoorz_1_1ipc_1_1_ipc_client_base.htm">IpcClientBase</a> : <span class="keyword">public</span> <span class="keyword">virtual</span> <a class="code" href="classnfcdoorz_1_1ipc_1_1_ipc_base.htm">IpcBase</a> {</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <a class="code" href="classnfcdoorz_1_1ipc_1_1_ipc_client_base.htm">IpcClientBase</a>() :</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;      <a class="code" href="classnfcdoorz_1_1ipc_1_1_ipc_base.htm">IpcBase</a>(),</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;      async(loop-&gt;resource&lt;uvw::AsyncHandle&gt;())</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    {</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;      async-&gt;init();</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    }</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordtype">bool</span> connect(std::string base64_socket_addr);</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordtype">void</span> setFd(<span class="keywordtype">int</span> fd) {</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;      _fd = fd;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    }</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordtype">void</span> runThread();</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    uint64_t getNextID();</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> onAsyncEvent(std::shared_ptr&lt;uvw::PipeHandle&gt;) = 0;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> onDataEvent(<span class="keyword">const</span> uvw::DataEvent &amp;ev, uvw::PipeHandle &amp;sock) = 0;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    std::thread _thread;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    std::shared_ptr&lt;uvw::AsyncHandle&gt; async;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordtype">int</span> _fd;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    uint64_t _next_id = 0;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  };</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  <span class="keyword">template</span>&lt;<span class="keyword">class</span> APIServer&gt;</div><div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="classnfcdoorz_1_1ipc_1_1_ipc_client.htm">   53</a></span>&#160;  <span class="keyword">class </span><a class="code" href="classnfcdoorz_1_1ipc_1_1_ipc_client.htm">IpcClient</a> : <span class="keyword">public</span> <a class="code" href="classnfcdoorz_1_1ipc_1_1_ipc_client_base.htm">IpcClientBase</a>, <span class="keyword">public</span> <span class="keyword">virtual</span> <a class="code" href="classnfcdoorz_1_1ipc_1_1_ipc_base.htm">IpcBase</a> {</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">using</span> APICall = std::remove_pointer_t&lt;decltype(std::declval&lt;APIServer&gt;().call())&gt;;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">using</span> APICallT = <span class="keyword">typename</span> APICall::NativeTableType;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">using</span> APICallsEnum = std::remove_pointer_t&lt;decltype(std::declval&lt;APICall&gt;().msg_type())&gt;;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">using</span> APIReply = std::remove_pointer_t&lt;decltype(std::declval&lt;APIServer&gt;().reply())&gt;;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">using</span> APIRepliesEnum = std::remove_pointer_t&lt;decltype(std::declval&lt;APIReply&gt;().msg_type())&gt;;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keyword">using</span> APIEventsEnum = std::remove_pointer_t&lt;decltype(std::declval&lt;APIReply&gt;().event_type())&gt;;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">using</span> APIReplyT = <span class="keyword">typename</span> APIReply::NativeTableType;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">using</span> APIEventsUnion = decltype(APIReplyT::event);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">using</span> EventCallback = std::function&lt;bool (APIEventsUnion &amp;)&gt;;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> CallType, <span class="keyword">typename</span> ReplyType&gt;</div><div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="structnfcdoorz_1_1ipc_1_1_ipc_client_1_1_callable.htm">   66</a></span>&#160;    <span class="keyword">struct </span><a class="code" href="structnfcdoorz_1_1ipc_1_1_ipc_client_1_1_callable.htm">Callable</a> {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;      <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classnfcdoorz_1_1ipc_1_1_ipc_client.htm">IpcClient</a>;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;      CallType *value;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;      std::optional&lt;std::shared_ptr&lt;uvw::PipeHandle&gt;&gt; sendPipe;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;      <a class="code" href="structnfcdoorz_1_1ipc_1_1_ipc_client_1_1_callable.htm">Callable</a> &amp;<span class="keyword">set</span>(std::function&lt;void (CallType *)&gt; cb) {</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        cb(value);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;      }</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;      std::future&lt;std::unique_ptr&lt;ReplyType&gt;&gt; gen() {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keyword">auto</span> res = c.makeCall(t, sendPipe);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        std::promise&lt;std::unique_ptr&lt;ReplyType&gt;&gt; prom;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keywordflow">if</span> (res.wait_for(std::chrono::seconds(5)) != std::future_status::ready) {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;          LOG_ERROR &lt;&lt; <span class="stringliteral">&quot;Timeout&quot;</span>;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;          prom.set_exception(std::make_exception_ptr(std::exception()));</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;          <span class="keywordflow">return</span> prom.get_future();</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        }</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        APIReplyT obj = res.get();</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keywordflow">if</span> (obj.msg.type != static_cast&lt;APIRepliesEnum&gt;(call_enum)) {</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;          LOG_ERROR &lt;&lt; <span class="stringliteral">&quot;Incorrect return type&quot;</span>;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;          prom.set_exception(std::make_exception_ptr(std::exception()));</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;          <span class="keywordflow">return</span> prom.get_future();</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        }</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        ReplyType *replyPtr = <span class="keyword">reinterpret_cast&lt;</span>ReplyType *<span class="keyword">&gt;</span>(obj.msg.value);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keyword">auto</span> ptr = std::unique_ptr&lt;ReplyType&gt;();</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        ptr.reset(<span class="keyword">new</span> ReplyType(std::move(*replyPtr)));</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="comment">// memcpy(ptr.get(), reply, sizeof(ReplyType));</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        prom.set_value(std::move(ptr));</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keywordflow">return</span> prom.get_future();</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;      }</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;      <a class="code" href="structnfcdoorz_1_1ipc_1_1_ipc_client_1_1_callable.htm">Callable</a>(uint64_t <span class="keywordtype">id</span>, <a class="code" href="classnfcdoorz_1_1ipc_1_1_ipc_client.htm">IpcClient</a> &amp;client) : c(client) {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        t.msg.Set(CallType());</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        call_enum = t.msg.type;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        value = <span class="keyword">reinterpret_cast&lt;</span>CallType *<span class="keyword">&gt;</span>(t.msg.value);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        t.id = id;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="comment">// Ensure reply is same position as call in flatbuffer union</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="comment">// Wish I could make this check at compile time</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keyword">auto</span> replyEnum = APIRepliesEnum::NONE;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;          APIReplyT reptest;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;          reptest.msg.Set(ReplyType());</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;          replyEnum = reptest.msg.type;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        }</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        assert(replyEnum == static_cast&lt;APIRepliesEnum&gt;(call_enum));</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;      };</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;      APICallT t;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;      APICallsEnum call_enum = APICallsEnum::NONE;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;      <a class="code" href="classnfcdoorz_1_1ipc_1_1_ipc_client.htm">IpcClient</a> &amp;c;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    };</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> TCall, <span class="keyword">typename</span> TRet&gt;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <a class="code" href="structnfcdoorz_1_1ipc_1_1_ipc_client_1_1_callable.htm">Callable&lt;TCall, TRet&gt;</a> getCall() {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;      std::lock_guard&lt;std::mutex&gt; lock(call_mutex);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;      <a class="code" href="structnfcdoorz_1_1ipc_1_1_ipc_client_1_1_callable.htm">Callable&lt;TCall, TRet&gt;</a> ret(getNextID(), *<span class="keyword">this</span>);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;      <span class="keywordflow">return</span> ret;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="keywordtype">void</span> registerEventHandler(APIEventsEnum event_type, EventCallback cb) {</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;      <span class="keywordflow">if</span> (!event_callbacks.count(event_type)) event_callbacks[event_type] = {};</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;      event_callbacks[event_type].push_back(std::move(cb));</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    }</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    std::mutex call_mutex;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    std::queue&lt;std::pair&lt;APICallT, std::optional&lt;std::shared_ptr&lt;uvw::PipeHandle&gt;&gt;&gt;&gt; calls_out_queue;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    std::map&lt;uint64_t, std::promise&lt;APIReplyT&gt;&gt; call_returns;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    std::map&lt;APIEventsEnum, std::vector&lt;EventCallback&gt;&gt; event_callbacks;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="comment">// std::optional&lt;std::promise&lt;APIReplyT&gt;&gt; current_call;</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    std::future&lt;APIReplyT&gt; makeCall(APICallT call, std::optional&lt;std::shared_ptr&lt;uvw::PipeHandle&gt;&gt; pipe) {</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;      std::promise&lt;APIReplyT&gt; prom;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;      <span class="keyword">auto</span> future = prom.get_future();</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;      call_returns[call.id] = std::move(prom);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;      calls_out_queue.emplace(std::move(call), pipe);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;      async-&gt;send();</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;      <span class="keywordflow">return</span> future;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    }</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordtype">void</span> onAsyncEvent(std::shared_ptr&lt;uvw::PipeHandle&gt; pipe)<span class="keyword"> override </span>{</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;      <span class="keywordflow">while</span> (!calls_out_queue.empty()) {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="keyword">auto</span> call_pair = calls_out_queue.front();</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        calls_out_queue.pop();</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        APICallT call = call_pair.first;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keyword">auto</span> optionalpipe = call_pair.second;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        flatbuffers::FlatBufferBuilder builder(1024);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        builder.Finish(APICall::Pack(builder, &amp;call));</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="keywordtype">size_t</span> size = builder.GetSize();</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        std::unique_ptr&lt;char[]&gt; data = std::make_unique&lt;char[]&gt;(size);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        memcpy(data.get(), builder.GetBufferPointer(), size);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keywordflow">if</span> (optionalpipe) {</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;          LOG_WARNING &lt;&lt; <span class="stringliteral">&quot;Sending with pipe&quot;</span>;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;          <span class="keyword">auto</span> &amp;send = *(optionalpipe-&gt;get());</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;          pipe-&gt;write(send, move(data), size);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;          pipe-&gt;write(move(data), size);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        }</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;      }</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    }</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keywordtype">void</span> onDataEvent(<span class="keyword">const</span> uvw::DataEvent &amp;ev, uvw::PipeHandle &amp;sock)<span class="keyword"> override </span>{</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;      LOG_DEBUG &lt;&lt; <span class="stringliteral">&quot;onDataEvent&quot;</span>;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;      uint8_t *data = (uint8_t *) ev.data.get();</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;      flatbuffers::BufferRef&lt;APIReply&gt; buf(data, ev.length);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;      <span class="keywordflow">if</span> (!buf.Verify()) {</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        LOG_ERROR &lt;&lt; <span class="stringliteral">&quot;verify failed&quot;</span>;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;      }</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;      APIReplyT reply;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;      buf.GetRoot()-&gt;UnPackTo(&amp;reply);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;      <span class="comment">// Handle reply</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;      <span class="keywordflow">if</span> (reply.msg.type != APIRepliesEnum::NONE) {</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        uint64_t call_id = reply.id;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="keywordflow">if</span> (call_returns.count(call_id)) {</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;          <span class="keyword">auto</span> &amp;prom = call_returns[call_id];</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;          prom.set_value(std::move(reply));</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;          call_returns.erase(call_id);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        }</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;      }</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;      <span class="comment">// Handle event</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;      <span class="keywordflow">if</span> (reply.event.type != APIEventsEnum::NONE) {</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <span class="keyword">auto</span> event_type = reply.event.type;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="keywordflow">if</span> (event_callbacks.count(event_type)) {</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;          <span class="keyword">auto</span> &amp;cbs = event_callbacks[event_type];</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;          <span class="keyword">auto</span> it = cbs.begin();</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;          <span class="keywordflow">while</span> (it != cbs.end()) {</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            <span class="keywordflow">if</span> ((*it)(reply.event)) {</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;              it = cbs.erase(it);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;              it++;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            }</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;          }</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        }</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;      }</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    }</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;  };</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;}</div><div class="ttc" id="classnfcdoorz_1_1ipc_1_1_ipc_base_htm"><div class="ttname"><a href="classnfcdoorz_1_1ipc_1_1_ipc_base.htm">nfcdoorz::ipc::IpcBase</a></div><div class="ttdef"><b>Definition:</b> <a href="ipc_8hpp_source.htm#l00039">ipc.hpp:39</a></div></div>
<div class="ttc" id="namespacenfcdoorz_1_1ipc_htm"><div class="ttname"><a href="namespacenfcdoorz_1_1ipc.htm">nfcdoorz::ipc</a></div><div class="ttdef"><b>Definition:</b> <a href="api_8hpp_source.htm#l00005">api.hpp:5</a></div></div>
<div class="ttc" id="structnfcdoorz_1_1ipc_1_1_ipc_client_1_1_callable_htm"><div class="ttname"><a href="structnfcdoorz_1_1ipc_1_1_ipc_client_1_1_callable.htm">nfcdoorz::ipc::IpcClient::Callable</a></div><div class="ttdef"><b>Definition:</b> <a href="ipc_2client_8hpp_source.htm#l00066">client.hpp:66</a></div></div>
<div class="ttc" id="classnfcdoorz_1_1ipc_1_1_ipc_client_base_htm"><div class="ttname"><a href="classnfcdoorz_1_1ipc_1_1_ipc_client_base.htm">nfcdoorz::ipc::IpcClientBase</a></div><div class="ttdef"><b>Definition:</b> <a href="ipc_2client_8hpp_source.htm#l00027">client.hpp:27</a></div></div>
<div class="ttc" id="classnfcdoorz_1_1ipc_1_1_ipc_client_htm"><div class="ttname"><a href="classnfcdoorz_1_1ipc_1_1_ipc_client.htm">nfcdoorz::ipc::IpcClient</a></div><div class="ttdef"><b>Definition:</b> <a href="ipc_2client_8hpp_source.htm#l00053">client.hpp:53</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_97aefd0d527b934f1d99a682da8fe6a9.htm">lib</a></li><li class="navelem"><a class="el" href="dir_eea5a30af1860202cf994ad4b8d0af6a.htm">ipc</a></li><li class="navelem"><b>client.hpp</b></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
