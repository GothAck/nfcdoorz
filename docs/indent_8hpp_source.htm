<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>NFC Doorz: lib/indent.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">NFC Doorz
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('indent_8hpp_source.htm','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">indent.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#include &lt;streambuf&gt;</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &lt;iomanip&gt;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div><div class="line"><a name="l00007"></a><span class="lineno"><a class="line" href="classwidthbuf.htm">    7</a></span>&#160;<span class="keyword">class </span><a class="code" href="classwidthbuf.htm">widthbuf</a> : <span class="keyword">public</span> std::streambuf {</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;  <a class="code" href="classwidthbuf.htm">widthbuf</a>(<span class="keywordtype">int</span> w, std::streambuf *s)</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;    : indent_width(0),</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;      def_width(w),</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;      width(w),</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;      sbuf(s),</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;      count(0)</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;  {</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;  }</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;  ~<a class="code" href="classwidthbuf.htm">widthbuf</a>() {</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;    overflow(<span class="charliteral">&#39;\n&#39;</span>);</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;  }</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;  <span class="keywordtype">void</span> set_indent(<span class="keywordtype">int</span> w) {</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="keywordflow">if</span> (w == 0) {</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;      prefix.clear();</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;      indent_width = 0;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;      width = def_width;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    }</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keywordflow">else</span> {</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;      <span class="keywordflow">if</span> (w &lt; 0 &amp;&amp; (-w) &gt; indent_width) w = -indent_width;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;      indent_width += w;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;      prefix = string(indent_width, space);</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;      width -= w;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    }</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  }</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;  <span class="keyword">typedef</span> std::basic_string&lt;char_type&gt; string;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;  <span class="comment">// This is basically a line-buffering stream buffer.</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;  <span class="comment">// The algorithm is:</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  <span class="comment">// - Explicit end of line (&quot;\r&quot; or &quot;\n&quot;): we flush our buffer</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;  <span class="comment">// to the underlying stream&#39;s buffer, and set our record of</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  <span class="comment">// the line length to 0.</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  <span class="comment">// - An &quot;alert&quot; character: sent to the underlying stream</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  <span class="comment">// without recording its length, since it doesn&#39;t normally</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;  <span class="comment">// affect the a appearance of the output.</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  <span class="comment">// - tab: treated as occupying `tab_width` characters, but is</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  <span class="comment">// passed through undisturbed (but if we wanted to expand it</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  <span class="comment">// to `tab_width` spaces, that would be pretty easy to do so</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  <span class="comment">// you could adjust the tab-width if you wanted.</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  <span class="comment">// - Everything else: really basic buffering with word wrapping.</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;  <span class="comment">// We try to add the character to the buffer, and if it exceeds</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;  <span class="comment">// our line width, we search for the last space/tab in the</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;  <span class="comment">// buffer and break the line there. If there is no space/tab,</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;  <span class="comment">// we break the line at the limit.</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  int_type overflow(int_type c) {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">if</span> (traits_type::eq_int_type(traits_type::eof(), c))</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;      <span class="keywordflow">return</span> traits_type::not_eof(c);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <span class="keywordflow">switch</span> (c) {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">case</span> <span class="charliteral">&#39;\n&#39;</span>:</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordflow">case</span> <span class="charliteral">&#39;\r&#39;</span>:</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;      buffer += c;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;      count = 0;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;      sbuf-&gt;sputn(prefix.c_str(), indent_width);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;      int_type rc = sbuf-&gt;sputn(buffer.c_str(), buffer.size());</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;      buffer.clear();</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;      <span class="keywordflow">return</span> rc;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    }</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordflow">case</span> <span class="charliteral">&#39;\a&#39;</span>:</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;      <span class="keywordflow">return</span> sbuf-&gt;sputc(c);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">case</span> <span class="charliteral">&#39;\t&#39;</span>:</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;      buffer += c;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;      count += tab_width - count % tab_width;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;      <span class="keywordflow">return</span> c;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordflow">default</span>:</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;      <span class="keywordflow">if</span> (count &gt;= width) {</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="keywordtype">size_t</span> wpos = buffer.find_last_of(<span class="stringliteral">&quot; \t&quot;</span>);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keywordflow">if</span> (wpos != string::npos) {</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;          sbuf-&gt;sputn(prefix.c_str(), indent_width);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;          sbuf-&gt;sputn(buffer.c_str(), wpos);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;          count = buffer.size() - wpos - 1;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;          buffer = string(buffer, wpos + 1);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        }</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keywordflow">else</span> {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;          sbuf-&gt;sputn(prefix.c_str(), indent_width);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;          sbuf-&gt;sputn(buffer.c_str(), buffer.size());</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;          buffer.clear();</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;          count = 0;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        }</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        sbuf-&gt;sputc(<span class="charliteral">&#39;\n&#39;</span>);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;      }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;      buffer += c;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;      ++count;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;      <span class="keywordflow">return</span> c;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    }</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;  <span class="keywordtype">size_t</span> indent_width;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  <span class="keywordtype">size_t</span> width, def_width;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  <span class="keywordtype">size_t</span> count;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  <span class="keywordtype">size_t</span> tab_count;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> tab_width = 8;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  <span class="keywordtype">string</span> prefix;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  char_type space = <span class="keyword">static_cast&lt;</span>char_type<span class="keyword">&gt;</span>(<span class="charliteral">&#39; &#39;</span>);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  std::streambuf *sbuf;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  <span class="keywordtype">string</span> buffer;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;};</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno"><a class="line" href="classwidthstream.htm">  114</a></span>&#160;<span class="keyword">class </span><a class="code" href="classwidthstream.htm">widthstream</a> : <span class="keyword">public</span> std::ostream {</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  <a class="code" href="classwidthbuf.htm">widthbuf</a> buf;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  <a class="code" href="classwidthstream.htm">widthstream</a>(<span class="keywordtype">size_t</span> width, std::ostream &amp;os)</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    : buf(width, os.rdbuf()),</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;      std::ostream(&amp;buf)</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  {</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;  }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  <a class="code" href="classwidthstream.htm">widthstream</a> &amp;indent(<span class="keywordtype">int</span> w) {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    buf.set_indent(w);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  }</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;};</div><div class="ttc" id="classwidthbuf_htm"><div class="ttname"><a href="classwidthbuf.htm">widthbuf</a></div><div class="ttdef"><b>Definition:</b> <a href="indent_8hpp_source.htm#l00007">indent.hpp:7</a></div></div>
<div class="ttc" id="classwidthstream_htm"><div class="ttname"><a href="classwidthstream.htm">widthstream</a></div><div class="ttdef"><b>Definition:</b> <a href="indent_8hpp_source.htm#l00114">indent.hpp:114</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_97aefd0d527b934f1d99a682da8fe6a9.htm">lib</a></li><li class="navelem"><b>indent.hpp</b></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
