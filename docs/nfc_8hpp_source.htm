<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>NFC Doorz: lib/nfc.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">NFC Doorz
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('nfc_8hpp_source.htm','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">nfc.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#include &lt;exception&gt;</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &lt;variant&gt;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;string_view&gt;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;optional&gt;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;functional&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;tuple&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;nfc/nfc.h&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;freefare.h&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &quot;tag.hpp&quot;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &quot;types.hpp&quot;</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacenfcdoorz_1_1nfc.htm">nfcdoorz::nfc</a> {</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;  <span class="keyword">class </span>Device;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno"><a class="line" href="classnfcdoorz_1_1nfc_1_1_context.htm">   21</a></span>&#160;  <span class="keyword">class </span><a class="code" href="classnfcdoorz_1_1nfc_1_1_context.htm">Context</a> {</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <a class="code" href="classnfcdoorz_1_1nfc_1_1_context.htm">Context</a>() : _context(<span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    };</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    ~<a class="code" href="classnfcdoorz_1_1nfc_1_1_context.htm">Context</a>();</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="keywordtype">bool</span> init();</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    std::vector&lt;Device&gt; getDevices();</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    std::optional&lt;Device&gt; getDeviceMatching(std::string suffix);</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <a class="code" href="classnfcdoorz_1_1nfc_1_1_device.htm">Device</a> getDeviceString(std::string device_string);</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keyword">operator</span> nfc_context *() {</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;      <span class="keywordflow">return</span> _context;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    };</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    nfc_context *_context;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;  };</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;  <span class="keyword">class </span><a class="code" href="classnfcdoorz_1_1nfc_1_1_tag.htm">Tag</a>;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="classnfcdoorz_1_1nfc_1_1_device.htm">   41</a></span>&#160;  <span class="keyword">class </span><a class="code" href="classnfcdoorz_1_1nfc_1_1_device.htm">Device</a> {</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <a class="code" href="classnfcdoorz_1_1nfc_1_1_device.htm">Device</a>(<a class="code" href="classnfcdoorz_1_1nfc_1_1_context.htm">Context</a> &amp;context, std::string device_string) :</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;      _context(context),</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;      _device(<span class="keyword">nullptr</span>),</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;      _device_string(device_string),</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;      _tags(<span class="keyword">nullptr</span>) {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    }</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    ~<a class="code" href="classnfcdoorz_1_1nfc_1_1_device.htm">Device</a>();</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordtype">bool</span> open();</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordtype">bool</span> initiatorInit();</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordtype">bool</span> initiatorPollTarget(std::function&lt;<span class="keywordtype">bool</span> (<a class="code" href="classnfcdoorz_1_1nfc_1_1_tag.htm">Tag</a> &amp;tag)&gt; handleTag);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    std::vector&lt;Tag&gt; getTags();</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="classnfcdoorz_1_1nfc_1_1_context.htm">Context</a> &amp;_context;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    nfc_device *_device;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    std::string _device_string;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    FreefareTag *_tags;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;  };</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  <span class="keyword">using</span> TagInterfaceVariant_t = std::variant&lt;DESFireTagInterface&gt;;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="classnfcdoorz_1_1nfc_1_1_tag.htm">   66</a></span>&#160;  <span class="keyword">class </span><a class="code" href="classnfcdoorz_1_1nfc_1_1_tag.htm">Tag</a> {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <a class="code" href="classnfcdoorz_1_1nfc_1_1_tag.htm">Tag</a>(<a class="code" href="classnfcdoorz_1_1nfc_1_1_device.htm">Device</a> &amp;device, FreefareTag tag) :</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;      _device(device), _tag(tag) {</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    };</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keyword">enum</span> freefare_tag_type getTagType();</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    TagInterfaceVariant_t getTagInterfaceByType();</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">operator</span> FreefareTag();</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <a class="code" href="classnfcdoorz_1_1nfc_1_1_device.htm">Device</a> &amp;_device;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    FreefareTag _tag;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  };</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  constexpr AppID_t ZERO_AID = { 0, 0, 0 };</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="structnfcdoorz_1_1nfc_1_1_key.htm">   82</a></span>&#160;  <span class="keyword">struct </span><a class="code" href="structnfcdoorz_1_1nfc_1_1_key.htm">Key</a> {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordtype">bool</span> diversify = <span class="keyword">false</span>;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keyword">virtual</span> <span class="keyword">operator</span> MifareDESFireKey();</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keyword">virtual</span> MifareDESFireKey deriveKey(<span class="keyword">const</span> UID_t &amp;uid, <span class="keyword">const</span> AppID_t &amp;aid = ZERO_AID);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    MifareDESFireKey deriveKeyImpl(MifareKeyType key_type, <span class="keyword">const</span> UID_t &amp;uid, <span class="keyword">const</span> AppID_t &amp;aid);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;  };</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;  <span class="keyword">template</span>&lt;u<span class="keywordtype">int</span>8_t size&gt;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;  std::array&lt;uint8_t, size&gt; hexToArray(std::string str) {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    std::array&lt;uint8_t, size&gt; arr;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordtype">size_t</span> len = str.length();</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordflow">if</span> (len != size * 2) {</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;      <span class="keywordflow">throw</span> std::exception();</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    }</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordflow">for</span> (uint8_t i = 0; i &lt; len; i += 2) {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;      arr[i / 2] = (char2int(str[i]) &lt;&lt; 4) | char2int(str[i + 1]);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    }</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordflow">return</span> arr;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  }</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="structnfcdoorz_1_1nfc_1_1_key_d_e_s.htm">  104</a></span>&#160;  <span class="keyword">struct </span><a class="code" href="structnfcdoorz_1_1nfc_1_1_key_d_e_s.htm">KeyDES</a> : <span class="keyword">public</span> <a class="code" href="structnfcdoorz_1_1nfc_1_1_key.htm">Key</a> {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    constexpr <span class="keyword">static</span> <span class="keyword">const</span> std::string_view type = <span class="stringliteral">&quot;des&quot;</span>;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> MifareKeyType key_type = MIFARE_KEY_DES;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    constexpr <span class="keyword">static</span> <span class="keyword">const</span> uint8_t size = 8;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keyword">using</span> KeyArray_t = std::array&lt;uint8_t, size&gt;;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    KeyArray_t data;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <a class="code" href="structnfcdoorz_1_1nfc_1_1_key_d_e_s.htm">KeyDES</a>() {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    };</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <a class="code" href="structnfcdoorz_1_1nfc_1_1_key_d_e_s.htm">KeyDES</a>(KeyArray_t _data) : data(_data) {</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    };</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <a class="code" href="structnfcdoorz_1_1nfc_1_1_key_d_e_s.htm">KeyDES</a>(std::string hexString) : data(hexToArray&lt;size&gt;(hexString)) {</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    };</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <a class="code" href="structnfcdoorz_1_1nfc_1_1_key_d_e_s.htm">KeyDES</a>(std::string hexString, <span class="keywordtype">bool</span> _diversify) : data(hexToArray&lt;size&gt;(hexString)) {</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;      diversify = _diversify;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    };</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keyword">operator</span> MifareDESFireKey() <span class="keyword">override</span>;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    MifareDESFireKey deriveKey(<span class="keyword">const</span> UID_t &amp;uid, <span class="keyword">const</span> AppID_t &amp;aid = ZERO_AID) <span class="keyword">override</span>;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  };</div><div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="structnfcdoorz_1_1nfc_1_1_key3_d_e_s.htm">  123</a></span>&#160;  <span class="keyword">struct </span><a class="code" href="structnfcdoorz_1_1nfc_1_1_key3_d_e_s.htm">Key3DES</a> : <span class="keyword">public</span> <a class="code" href="structnfcdoorz_1_1nfc_1_1_key.htm">Key</a> {</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    constexpr <span class="keyword">static</span> <span class="keyword">const</span> std::string_view type = <span class="stringliteral">&quot;3des&quot;</span>;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> MifareKeyType key_type = MIFARE_KEY_2K3DES;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    constexpr <span class="keyword">static</span> <span class="keyword">const</span> uint8_t size = 16;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keyword">using</span> KeyArray_t = std::array&lt;uint8_t, size&gt;;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    KeyArray_t data;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <a class="code" href="structnfcdoorz_1_1nfc_1_1_key3_d_e_s.htm">Key3DES</a>() {</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    };</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <a class="code" href="structnfcdoorz_1_1nfc_1_1_key3_d_e_s.htm">Key3DES</a>(KeyArray_t _data) : data(_data) {</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    };</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <a class="code" href="structnfcdoorz_1_1nfc_1_1_key3_d_e_s.htm">Key3DES</a>(std::string hexString) : data(hexToArray&lt;size&gt;(hexString)) {</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    };</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <a class="code" href="structnfcdoorz_1_1nfc_1_1_key3_d_e_s.htm">Key3DES</a>(std::string hexString, <span class="keywordtype">bool</span> _diversify) : data(hexToArray&lt;size&gt;(hexString)) {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;      diversify = _diversify;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    };</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keyword">operator</span> MifareDESFireKey() <span class="keyword">override</span>;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    MifareDESFireKey deriveKey(<span class="keyword">const</span> UID_t &amp;uid, <span class="keyword">const</span> AppID_t &amp;aid = ZERO_AID) <span class="keyword">override</span>;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  };</div><div class="line"><a name="l00141"></a><span class="lineno"><a class="line" href="structnfcdoorz_1_1nfc_1_1_key3k3_d_e_s.htm">  141</a></span>&#160;  <span class="keyword">struct </span><a class="code" href="structnfcdoorz_1_1nfc_1_1_key3k3_d_e_s.htm">Key3k3DES</a> : <span class="keyword">public</span> <a class="code" href="structnfcdoorz_1_1nfc_1_1_key.htm">Key</a> {</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    constexpr <span class="keyword">static</span> <span class="keyword">const</span> std::string_view type = <span class="stringliteral">&quot;3k3des&quot;</span>;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> MifareKeyType key_type = MIFARE_KEY_3K3DES;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    constexpr <span class="keyword">static</span> <span class="keyword">const</span> uint8_t size = 24;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keyword">using</span> KeyArray_t = std::array&lt;uint8_t, size&gt;;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    KeyArray_t data;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <a class="code" href="structnfcdoorz_1_1nfc_1_1_key3k3_d_e_s.htm">Key3k3DES</a>() {</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    };</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <a class="code" href="structnfcdoorz_1_1nfc_1_1_key3k3_d_e_s.htm">Key3k3DES</a>(KeyArray_t _data) : data(_data) {</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    };</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <a class="code" href="structnfcdoorz_1_1nfc_1_1_key3k3_d_e_s.htm">Key3k3DES</a>(std::string hexString) : data(hexToArray&lt;size&gt;(hexString)) {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    };</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <a class="code" href="structnfcdoorz_1_1nfc_1_1_key3k3_d_e_s.htm">Key3k3DES</a>(std::string hexString, <span class="keywordtype">bool</span> _diversify) : data(hexToArray&lt;size&gt;(hexString)) {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;      diversify = _diversify;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    };</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keyword">operator</span> MifareDESFireKey() <span class="keyword">override</span>;</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    MifareDESFireKey deriveKey(<span class="keyword">const</span> UID_t &amp;uid, <span class="keyword">const</span> AppID_t &amp;aid = ZERO_AID) <span class="keyword">override</span>;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;  };</div><div class="line"><a name="l00159"></a><span class="lineno"><a class="line" href="structnfcdoorz_1_1nfc_1_1_key_a_e_s.htm">  159</a></span>&#160;  <span class="keyword">struct </span><a class="code" href="structnfcdoorz_1_1nfc_1_1_key_a_e_s.htm">KeyAES</a> : <span class="keyword">public</span> <a class="code" href="structnfcdoorz_1_1nfc_1_1_key.htm">Key</a> {</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    constexpr <span class="keyword">static</span> <span class="keyword">const</span> std::string_view type = <span class="stringliteral">&quot;aes&quot;</span>;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> MifareKeyType key_type = MIFARE_KEY_AES128;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    constexpr <span class="keyword">static</span> <span class="keyword">const</span> uint8_t size = 16;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keyword">using</span> KeyArray_t = std::array&lt;uint8_t, size&gt;;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    KeyArray_t data;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <a class="code" href="structnfcdoorz_1_1nfc_1_1_key_a_e_s.htm">KeyAES</a>() {</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    };</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <a class="code" href="structnfcdoorz_1_1nfc_1_1_key_a_e_s.htm">KeyAES</a>(KeyArray_t _data) : data(_data) {</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    };</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <a class="code" href="structnfcdoorz_1_1nfc_1_1_key_a_e_s.htm">KeyAES</a>(std::string hexString) : data(hexToArray&lt;size&gt;(hexString)) {</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    };</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <a class="code" href="structnfcdoorz_1_1nfc_1_1_key_a_e_s.htm">KeyAES</a>(std::string hexString, <span class="keywordtype">bool</span> _diversify) : data(hexToArray&lt;size&gt;(hexString)) {</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;      diversify = _diversify;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    };</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keyword">operator</span> MifareDESFireKey() <span class="keyword">override</span>;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    MifareDESFireKey deriveKey(<span class="keyword">const</span> UID_t &amp;uid, <span class="keyword">const</span> AppID_t &amp;aid = ZERO_AID) <span class="keyword">override</span>;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  };</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;  <span class="keyword">using</span> KeyVariant_t = std::variant&lt;KeyDES, Key3DES, Key3k3DES, KeyAES&gt;;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  <span class="keyword">using</span> OptionalKeyVariant_t = std::variant&lt;std::monostate, KeyDES, Key3DES, Key3k3DES, KeyAES&gt;;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;}</div><div class="ttc" id="structnfcdoorz_1_1nfc_1_1_key3k3_d_e_s_htm"><div class="ttname"><a href="structnfcdoorz_1_1nfc_1_1_key3k3_d_e_s.htm">nfcdoorz::nfc::Key3k3DES</a></div><div class="ttdef"><b>Definition:</b> <a href="nfc_8hpp_source.htm#l00141">nfc.hpp:141</a></div></div>
<div class="ttc" id="classnfcdoorz_1_1nfc_1_1_tag_htm"><div class="ttname"><a href="classnfcdoorz_1_1nfc_1_1_tag.htm">nfcdoorz::nfc::Tag</a></div><div class="ttdef"><b>Definition:</b> <a href="nfc_8hpp_source.htm#l00066">nfc.hpp:66</a></div></div>
<div class="ttc" id="structnfcdoorz_1_1nfc_1_1_key_d_e_s_htm"><div class="ttname"><a href="structnfcdoorz_1_1nfc_1_1_key_d_e_s.htm">nfcdoorz::nfc::KeyDES</a></div><div class="ttdef"><b>Definition:</b> <a href="nfc_8hpp_source.htm#l00104">nfc.hpp:104</a></div></div>
<div class="ttc" id="classnfcdoorz_1_1nfc_1_1_context_htm"><div class="ttname"><a href="classnfcdoorz_1_1nfc_1_1_context.htm">nfcdoorz::nfc::Context</a></div><div class="ttdef"><b>Definition:</b> <a href="nfc_8hpp_source.htm#l00021">nfc.hpp:21</a></div></div>
<div class="ttc" id="namespacenfcdoorz_1_1nfc_htm"><div class="ttname"><a href="namespacenfcdoorz_1_1nfc.htm">nfcdoorz::nfc</a></div><div class="ttdef"><b>Definition:</b> <a href="nfc_8cpp_source.htm#l00005">nfc.cpp:5</a></div></div>
<div class="ttc" id="classnfcdoorz_1_1nfc_1_1_device_htm"><div class="ttname"><a href="classnfcdoorz_1_1nfc_1_1_device.htm">nfcdoorz::nfc::Device</a></div><div class="ttdef"><b>Definition:</b> <a href="nfc_8hpp_source.htm#l00041">nfc.hpp:41</a></div></div>
<div class="ttc" id="structnfcdoorz_1_1nfc_1_1_key_htm"><div class="ttname"><a href="structnfcdoorz_1_1nfc_1_1_key.htm">nfcdoorz::nfc::Key</a></div><div class="ttdef"><b>Definition:</b> <a href="nfc_8hpp_source.htm#l00082">nfc.hpp:82</a></div></div>
<div class="ttc" id="structnfcdoorz_1_1nfc_1_1_key_a_e_s_htm"><div class="ttname"><a href="structnfcdoorz_1_1nfc_1_1_key_a_e_s.htm">nfcdoorz::nfc::KeyAES</a></div><div class="ttdef"><b>Definition:</b> <a href="nfc_8hpp_source.htm#l00159">nfc.hpp:159</a></div></div>
<div class="ttc" id="structnfcdoorz_1_1nfc_1_1_key3_d_e_s_htm"><div class="ttname"><a href="structnfcdoorz_1_1nfc_1_1_key3_d_e_s.htm">nfcdoorz::nfc::Key3DES</a></div><div class="ttdef"><b>Definition:</b> <a href="nfc_8hpp_source.htm#l00123">nfc.hpp:123</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_97aefd0d527b934f1d99a682da8fe6a9.htm">lib</a></li><li class="navelem"><b>nfc.hpp</b></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
