<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>NFC Doorz: apps/nfcdoorz-manager.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">NFC Doorz
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('nfcdoorz-manager_8cpp_source.htm','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">nfcdoorz-manager.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#include &lt;filesystem&gt;</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &lt;sys/socket.h&gt;</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &lt;sys/un.h&gt;</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;sys/types.h&gt;</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;signal.h&gt;</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;kj/debug.h&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &lt;kj/async.h&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;capnp/ez-rpc.h&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;capnp/message.h&gt;</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;uvw.hpp&gt;</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;docopt/docopt.h&gt;</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &lt;seasocks/Logger.h&gt;</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;seasocks/PrintfLogger.h&gt;</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &lt;seasocks/Server.h&gt;</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;lib/types.hpp&quot;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &quot;lib/logging.hpp&quot;</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &quot;lib/config.hpp&quot;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;lib/procmanager.hpp&quot;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;lib/ipc/ipc.hpp&quot;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;lib/ipc/server.hpp&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespaceseasocks.htm">seasocks</a>;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacestd.htm">std</a>;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacenfcdoorz.htm">nfcdoorz</a>;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacenfcdoorz_1_1manager.htm">nfcdoorz::manager</a>;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> USAGE[] =</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  R<span class="stringliteral">&quot;(NFC-Doorz Authentication Manager</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="stringliteral">      Usage:</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="stringliteral">        doorz-auth-manager [-v | -vv | -vvv] [options]</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="stringliteral">        doorz-auth-manager (-h | --help)</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="stringliteral">        doorz-auth-manager --version</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="stringliteral">      Options:</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="stringliteral">        -h --help               Show this help</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="stringliteral">        --version               Show version</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="stringliteral">        --config=CONFIG         Use config file [default: ./config.yaml]</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="stringliteral">        -v --verbose            Verbose output</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="stringliteral">        --api-port=PORT         API port [default: 9672]</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="stringliteral">        --api-host=HOST         API host [default: ::1]</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="stringliteral">  )&quot;;</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="stringliteral"><a class="code" href="classnfcdoorz_1_1manager_1_1proc_1_1_proc_manager.htm">proc::ProcManager</a> procManager;</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="stringliteral"></span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="stringliteral"></span><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc, <span class="keyword">const</span> <span class="keywordtype">char</span> *argv[]) {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;  map&lt;string, docopt::value&gt; args = docopt::docopt(</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    USAGE,</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    { argv + 1, argv + argc },</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">true</span>,</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="stringliteral">&quot;NFC-Doorz Authentication Manager v0.0.1&quot;</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    );</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  procManager.setRegisterPid([](<span class="keyword">auto</span> &amp;proc) {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    LOG_DEBUG &lt;&lt; <span class="stringliteral">&quot;registerPid &quot;</span> &lt;&lt; proc.getName() &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; proc.getPid();</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    ipc::server-&gt;registerPid(proc.getName(), proc.getPid());</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;  });</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  procManager.setUnregisterPid([](<span class="keyword">auto</span> &amp;proc) {</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    LOG_DEBUG &lt;&lt; <span class="stringliteral">&quot;unregisterPid &quot;</span> &lt;&lt; proc.getName() &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; proc.getPid();</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    ipc::server-&gt;unregisterPid(proc.getPid());</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  });</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;  logging::init(args);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;  <a class="code" href="structnfcdoorz_1_1config_1_1_config.htm">config::Config</a> config;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;  <span class="keywordflow">try</span> {</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    config = config::Config::load(args);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  } <span class="keywordflow">catch</span> (<a class="code" href="classnfcdoorz_1_1config_1_1_validation_exception.htm">config::ValidationException</a> e) {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    LOG_ERROR</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;      &lt;&lt; e.what() &lt;&lt; endl</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;      &lt;&lt; <span class="stringliteral">&quot;Invalid config node found&quot;</span> &lt;&lt; endl;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordflow">return</span> 9;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  }</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  <span class="keywordflow">if</span> (!procManager.init(filesystem::path(argv[0]).parent_path() / <span class="stringliteral">&quot;manager&quot;</span>, ipc::server-&gt;pipe)) {</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    LOG_ERROR &lt;&lt; <span class="stringliteral">&quot;Failed to init process manager&quot;</span>;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordflow">return</span> 9;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  }</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordtype">int</span> server_sock = socket(AF_UNIX, SOCK_SEQPACKET, 0);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keyword">struct </span>sockaddr_un server_sock_addr;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    socklen_t server_sock_addr_len;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    memset(&amp;server_sock_addr, 0, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_un));</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    server_sock_addr.sun_family = AF_UNIX;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordflow">if</span> (bind(</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;      server_sock,</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;      (<span class="keyword">struct</span> sockaddr *) &amp;server_sock_addr,</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;      offsetof(<span class="keyword">struct</span> sockaddr_un, sun_path)</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;      ) == -1) {</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;      LOG_ERROR &lt;&lt; <span class="stringliteral">&quot;Failed to bind &quot;</span> &lt;&lt; errno;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    }</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    ipc::server-&gt;open(server_sock);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  ipc::server-&gt;listen();</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  <span class="comment">// ipc::server-&gt;pipe-&gt;bind(&quot;&quot;);</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  <span class="comment">// ipc::server-&gt;pipe-&gt;listen();</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  {</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    procManager.create(</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;      ipc::api::Server::GetFullyQualifiedName(),</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;      <span class="stringliteral">&quot;api&quot;</span>,</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;      proc::ProcManager::filterArgs(args, <span class="stringliteral">&quot;--api-&quot;</span>),</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;      <span class="keyword">true</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;      )-&gt;run();</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;  }</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  <span class="keywordflow">if</span> (0) {</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    procManager.create(</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;      ipc::auth::Server::GetFullyQualifiedName(),</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;      <span class="stringliteral">&quot;auth&quot;</span>,</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;      proc::ProcManager::filterArgs(args, <span class="stringliteral">&quot;--api-&quot;</span>),</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;      <span class="keyword">true</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;      )-&gt;run();</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;  }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  ipc::server-&gt;registerServiceHandler&lt;ipc::auth::Server&gt;()</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  -&gt;registerHandler(</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    ipc::auth::Calls::nfcdoorz_ipc_common_ConfigCall,</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    [&amp;args, &amp;config](<span class="keyword">auto</span> <span class="keyword">self</span>, <span class="keyword">const</span> ipc::auth::CallT &amp;msg, <span class="keyword">auto</span> reply, uvw::PipeHandle &amp;pipe) -&gt; <span class="keyword">auto</span> {</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    reply-&gt;msg.Set(ipc::common::ConfigReplyT());</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keyword">auto</span> s = reply-&gt;msg.Asnfcdoorz_ipc_common_ConfigReply();</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    s-&gt;config = config.stringify();</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordflow">return</span> reply;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  });</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  ipc::server-&gt;registerServiceHandler&lt;ipc::policy::Server&gt;()</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  -&gt;registerHandler(</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    ipc::policy::Calls::nfcdoorz_ipc_common_ConfigCall,</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    [&amp;args, &amp;config](<span class="keyword">auto</span> <span class="keyword">self</span>, <span class="keyword">const</span> ipc::policy::CallT &amp;msg, <span class="keyword">auto</span> reply, uvw::PipeHandle &amp;pipe) -&gt; <span class="keyword">auto</span> {</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    reply-&gt;msg.Set(ipc::common::ConfigReplyT());</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keyword">auto</span> s = reply-&gt;msg.Asnfcdoorz_ipc_common_ConfigReply();</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    s-&gt;config = config.stringify();</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordflow">return</span> reply;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  });</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;  ipc::server-&gt;registerServiceHandler&lt;ipc::api::Server&gt;()</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;  -&gt;registerHandler(</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    ipc::api::Calls::nfcdoorz_ipc_common_ConfigCall,</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    [&amp;args, &amp;config](<span class="keyword">auto</span> <span class="keyword">self</span>, <span class="keyword">const</span> ipc::api::CallT &amp;msg, <span class="keyword">auto</span> reply, uvw::PipeHandle &amp;pipe) -&gt; <span class="keyword">auto</span> {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    reply-&gt;msg.Set(ipc::common::ConfigReplyT());</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="keyword">auto</span> s = reply-&gt;msg.Asnfcdoorz_ipc_common_ConfigReply();</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    s-&gt;config = config.stringify();</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keywordflow">return</span> reply;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;  })</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;  -&gt;registerHandler(</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    ipc::api::Calls::StatusCall,</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    [](<span class="keyword">auto</span> <span class="keyword">self</span>, <span class="keyword">const</span> ipc::api::CallT &amp;msg, <span class="keyword">auto</span> reply, uvw::PipeHandle &amp;) -&gt; <span class="keyword">auto</span> {</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    LOG_DEBUG &lt;&lt; <span class="stringliteral">&quot;handle StatusCall&quot;</span>;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    reply-&gt;msg.Set(ipc::api::StatusReplyT());</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keyword">auto</span> s = reply-&gt;msg.AsStatusReply();</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    uint32_t i = 0;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> p : procManager.processes) {</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;      <span class="keyword">auto</span> proc = make_unique&lt;ipc::api::ProcessT&gt;();</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;      proc-&gt;pid = p-&gt;getPid();</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;      proc-&gt;name = p-&gt;getName();</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;      proc-&gt;args = p-&gt;getArgs();</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;      s-&gt;processes.push_back(move(proc));</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    }</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordflow">return</span> reply;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  })</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;  -&gt;registerHandler(</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    ipc::api::Calls::CreateAuthenticatorCall,</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    [&amp;args](<span class="keyword">auto</span> <span class="keyword">self</span>, <span class="keyword">const</span> ipc::api::CallT &amp;msg, <span class="keyword">auto</span> reply, uvw::PipeHandle &amp;pipe) -&gt; <span class="keyword">auto</span> {</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keyword">using</span> PromT = promise&lt;unique_ptr&lt;ipc::api::ReplyT&gt;&gt;;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    LOG_DEBUG &lt;&lt; <span class="stringliteral">&quot;handle CreateAuthenticatorCall&quot;</span>;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keyword">auto</span> call = msg.msg.AsCreateAuthenticatorCall();</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keywordflow">if</span> (!call) {</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;      LOG_ERROR &lt;&lt; <span class="stringliteral">&quot;Invalid call&quot;</span>;</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;      <span class="keywordflow">throw</span> exception();</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    }</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    PromT prom;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    reply-&gt;msg.Set(ipc::api::CreateAuthenticatorReplyT());</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keyword">auto</span> s = reply-&gt;msg.AsCreateAuthenticatorReply();</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    vector&lt;string&gt; arg_vec = proc::ProcManager::filterArgs(args, <span class="stringliteral">&quot;--auth-&quot;</span>);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    arg_vec.push_back(<span class="keywordtype">string</span>(<span class="stringliteral">&quot;pn532_uart:&quot;</span>) + call-&gt;ttyName);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keyword">auto</span> proc = procManager.create(</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;      ipc::auth::Server::GetFullyQualifiedName(),</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;      <span class="stringliteral">&quot;auth&quot;</span>,</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;      arg_vec,</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;      <span class="keyword">false</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;      );</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    proc-&gt;setOnDestroy([<span class="keyword">self</span>, deviceID = call-&gt;deviceID, &amp;pipe](<span class="keyword">const</span> <a class="code" href="classnfcdoorz_1_1manager_1_1proc_1_1_proc.htm">proc::Proc</a> &amp;) {</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;      ipc::api::EventsUnion eventUnion;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;      eventUnion.Set(ipc::api::AuthenticatorExitEventT());</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;      auto event = eventUnion.AsAuthenticatorExitEvent();</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;      event-&gt;deviceID = deviceID;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;      self-&gt;sendEvent(eventUnion, pipe);</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    });</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    proc-&gt;run();</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="comment">// if (pending) {</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    s-&gt;status = <span class="keyword">true</span>;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="comment">// }</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    prom.set_value(move(reply));</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keywordflow">return</span> prom.get_future();</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  }</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    );</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;  ipc::server-&gt;run();</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;  <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;}</div><div class="ttc" id="namespacestd_htm"><div class="ttname"><a href="namespacestd.htm">std</a></div><div class="ttdoc">STL namespace. </div></div>
<div class="ttc" id="namespacenfcdoorz_1_1manager_htm"><div class="ttname"><a href="namespacenfcdoorz_1_1manager.htm">nfcdoorz::manager</a></div><div class="ttdef"><b>Definition:</b> <a href="manager_2client_8cpp_source.htm#l00003">client.cpp:3</a></div></div>
<div class="ttc" id="structnfcdoorz_1_1config_1_1_config_htm"><div class="ttname"><a href="structnfcdoorz_1_1config_1_1_config.htm">nfcdoorz::config::Config</a></div><div class="ttdef"><b>Definition:</b> <a href="config_8hpp_source.htm#l00292">config.hpp:292</a></div></div>
<div class="ttc" id="classnfcdoorz_1_1manager_1_1proc_1_1_proc_htm"><div class="ttname"><a href="classnfcdoorz_1_1manager_1_1proc_1_1_proc.htm">nfcdoorz::manager::proc::Proc</a></div><div class="ttdef"><b>Definition:</b> <a href="procmanager_8hpp_source.htm#l00071">procmanager.hpp:71</a></div></div>
<div class="ttc" id="classnfcdoorz_1_1manager_1_1proc_1_1_proc_manager_htm"><div class="ttname"><a href="classnfcdoorz_1_1manager_1_1proc_1_1_proc_manager.htm">nfcdoorz::manager::proc::ProcManager</a></div><div class="ttdef"><b>Definition:</b> <a href="procmanager_8hpp_source.htm#l00026">procmanager.hpp:26</a></div></div>
<div class="ttc" id="classnfcdoorz_1_1config_1_1_validation_exception_htm"><div class="ttname"><a href="classnfcdoorz_1_1config_1_1_validation_exception.htm">nfcdoorz::config::ValidationException</a></div><div class="ttdef"><b>Definition:</b> <a href="config_8hpp_source.htm#l00048">config.hpp:48</a></div></div>
<div class="ttc" id="namespaceseasocks_htm"><div class="ttname"><a href="namespaceseasocks.htm">seasocks</a></div><div class="ttdef"><b>Definition:</b> <a href="seasocks-plog_8hpp_source.htm#l00008">seasocks-plog.hpp:8</a></div></div>
<div class="ttc" id="namespacenfcdoorz_htm"><div class="ttname"><a href="namespacenfcdoorz.htm">nfcdoorz</a></div><div class="ttdef"><b>Definition:</b> <a href="adapter_8cpp_source.htm#l00007">adapter.cpp:7</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_9654b8d08f4bba4e84b362c5fd320bee.htm">apps</a></li><li class="navelem"><b>nfcdoorz-manager.cpp</b></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
