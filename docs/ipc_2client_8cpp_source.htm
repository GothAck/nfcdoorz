<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>NFC Doorz: lib/ipc/client.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">NFC Doorz
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('ipc_2client_8cpp_source.htm','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">client.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#include &quot;client.hpp&quot;</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacenfcdoorz_1_1ipc.htm">nfcdoorz::ipc</a> {</div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;  <span class="keyword">using namespace </span><a class="code" href="namespacestd.htm">std</a>;</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;  <span class="keywordtype">bool</span> IpcClientBase::connect(<span class="keywordtype">string</span> base64_socket_addr) {</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;    <span class="keyword">auto</span> connect_data = base64::decode(base64_socket_addr);</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;    <span class="keywordtype">int</span> child_sock = socket(AF_UNIX, SOCK_SEQPACKET, 0);</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> optval = 1;</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;    <span class="keywordflow">if</span> (setsockopt(child_sock, SOL_SOCKET, SO_PASSCRED, &amp;optval, <span class="keyword">sizeof</span>(optval)) == -1) {</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;      LOG_ERROR &lt;&lt; <span class="stringliteral">&quot;Failed to set SO_PASSCRED&quot;</span>;</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;    }</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    <span class="keyword">struct </span>sockaddr_un server_sock_addr;</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    server_sock_addr.sun_family = AF_UNIX;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    memcpy(server_sock_addr.sun_path, connect_data.data(), connect_data.size());</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    socklen_t server_sock_addr_len = offsetof(<span class="keyword">struct</span> sockaddr_un, sun_path);</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    server_sock_addr_len += connect_data.size();</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="keywordflow">if</span> (::connect(</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;      child_sock,</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;      (<span class="keyword">struct</span> sockaddr *) &amp;server_sock_addr,</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;      server_sock_addr_len</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;      ) == -1) {</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;      LOG_ERROR &lt;&lt; <span class="stringliteral">&quot;Failed to connect to parent socket&quot;</span>;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;      close(child_sock);</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    }</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    setFd(child_sock);</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;  }</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;  uint64_t IpcClientBase::getNextID() {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordflow">return</span> _next_id++;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;  }</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;  <span class="keywordtype">void</span> IpcClientBase::runThread() {</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    _thread = thread([<span class="keyword">this</span>]() {</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;      <span class="keyword">auto</span> client = loop-&gt;resource&lt;uvw::PipeHandle&gt;(<span class="keyword">true</span>);</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;      client-&gt;on&lt;uvw::ErrorEvent&gt;([](<span class="keyword">const</span> uvw::ErrorEvent &amp;e, uvw::PipeHandle &amp;) {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        LOG_ERROR &lt;&lt; e.what();</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;      });</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;      client-&gt;on&lt;uvw::CloseEvent&gt;([](<span class="keyword">const</span> uvw::CloseEvent &amp;, uvw::PipeHandle &amp;handle) {</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        handle.close();</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;      });</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;      client-&gt;on&lt;uvw::EndEvent&gt;([](<span class="keyword">const</span> uvw::EndEvent &amp;, uvw::PipeHandle &amp;sock) {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        sock.close();</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;      });</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;      client-&gt;on&lt;uvw::DataEvent&gt;([<span class="keyword">this</span>](<span class="keyword">const</span> uvw::DataEvent &amp;ev, uvw::PipeHandle &amp;sock) {</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        onDataEvent(ev, sock);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;      });</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;      async-&gt;on&lt;uvw::AsyncEvent&gt;([<span class="keyword">this</span>, client](<span class="keyword">const</span> uvw::AsyncEvent &amp;, uvw::AsyncHandle &amp;) {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        onAsyncEvent(client);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;      });</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;      client-&gt;open(_fd);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;      client-&gt;read();</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;      loop-&gt;run();</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    });</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  }</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">// template&lt;class APIServer&gt;</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">// template &lt;typename CallType, typename ReplyType, typename ReturnTrait&gt;</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">// APIRepliesEnum IpcClient::Callable::replyEnum = ReturnSubtypeToEnum&lt;ReplyType&gt;();</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div><div class="ttc" id="namespacestd_htm"><div class="ttname"><a href="namespacestd.htm">std</a></div><div class="ttdoc">STL namespace. </div></div>
<div class="ttc" id="namespacenfcdoorz_1_1ipc_htm"><div class="ttname"><a href="namespacenfcdoorz_1_1ipc.htm">nfcdoorz::ipc</a></div><div class="ttdef"><b>Definition:</b> <a href="api_8hpp_source.htm#l00005">api.hpp:5</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_97aefd0d527b934f1d99a682da8fe6a9.htm">lib</a></li><li class="navelem"><a class="el" href="dir_eea5a30af1860202cf994ad4b8d0af6a.htm">ipc</a></li><li class="navelem"><b>client.cpp</b></li>
    <li class="footer">Generated by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
